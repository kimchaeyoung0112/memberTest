package com.kosta.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.kosta.dto.MemberDTO;

public class MemberDAO {
	
	ArrayList<MemberDTO> arr = new ArrayList<MemberDTO>();

	// db연결 메서드
	private Connection getConnection() {
		String className = "oracle.jdbc.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:XE";
		String user = "hr";
		String pwd = "hr";
		Connection conn = null;

		try {
			Class.forName(className);
			conn = DriverManager.getConnection(url, user, pwd);
		} catch (Exception e) {
			System.out.println(e);
		}
		return conn;
	}

	// insert 기능 메서드
	public int insert(MemberDTO dto) {

		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		StringBuilder sql = new StringBuilder();
		sql.append("insert into member(		");
		sql.append("  		member_seq		");
		sql.append(" 		, member_id		");
		sql.append(" 		, member_pwd	");
		sql.append("		, name			");
		sql.append(" 		, email			");
		sql.append(" 		, member_date)	");
		sql.append(" values (seq.nextval , ? , ? , ? , ? , sysdate )");

		int result = 0; // try안에서 int result를 만들면 마지막 리턴을 못함

		try {
			pstmt = conn.prepareStatement(sql.toString());

			pstmt.setString(1, dto.getMember_id());
			pstmt.setString(2, dto.getMember_pwd());
			pstmt.setString(3, dto.getName());
			pstmt.setString(4, dto.getEmail());

			result = pstmt.executeUpdate();

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}
		return result;
	}

	// update 기능 메서드
	public int update(String member_id, String member_pwd, String email) {
		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		StringBuilder sql = new StringBuilder();

		sql.append(" update member set     ");
		sql.append("     member_pwd  = ?   ");
		sql.append("    , email = ?        ");
		sql.append(" where                 ");
		sql.append(" 		member_id = ?  ");

		int result = 0;

		try {
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, member_pwd);
			pstmt.setString(2, email);
			pstmt.setString(3, member_id);

			result = pstmt.executeUpdate();

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}

		return result;
	}

	// delete 기능 메서드
	public int delete(String member_id) {
		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		StringBuilder sql = new StringBuilder();
		sql.append(" delete from member    ");
		sql.append(" where				   ");
		sql.append("  member_id = ?		   ");

		int result = 0;

		try {
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, member_id);

			result = pstmt.executeUpdate();

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}

		return result;
	}

	// select 기능 메서드
	public int idSelect(String member_id) {
		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuilder sql = new StringBuilder();

		sql.append(" select                 ");
		sql.append(" 		   member_seq   ");
		sql.append(" 		   , member_id  ");
		sql.append(" 		   , member_pwd ");
		sql.append(" 		   , name       ");
		sql.append(" 		   , email      ");
		sql.append(" 		   , member_date");
		sql.append(" from    				");
		sql.append(" 		   member		");
		sql.append(" where 					");
		sql.append("  member_id = ? 		");

		int result = 0;

		try {
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, member_id);

			result = pstmt.executeUpdate();
			rs = pstmt.executeQuery();

			while (rs.next()) {

				MemberDTO dto = new MemberDTO();

				dto.setMamber_seq(rs.getInt("member_seq"));
				dto.setMember_id(rs.getString("member_id"));
				dto.setMember_pwd(rs.getString("member_pwd"));
				dto.setName(rs.getString("name"));
				dto.setEmail(rs.getString("email"));
				dto.setMember_date(rs.getDate("member_date"));
				
				System.out.println(dto.toString());

			}

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}

		return result;

	}
	
	//회원전체조회
	public MemberDTO getAll() {

		MemberDTO dto = new MemberDTO();

		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		StringBuilder sql = new StringBuilder();

		sql.append(" select                 ");
		sql.append(" 		   member_seq   ");
		sql.append(" 		   , member_id  ");
		sql.append(" 		   , member_pwd ");
		sql.append(" 		   , name       ");
		sql.append(" 		   , email      ");
		sql.append(" 		   , member_date");
		sql.append(" from    				");
		sql.append(" 		   member		");

		int result = 0;

		try {
			pstmt = conn.prepareStatement(sql.toString());

			result = pstmt.executeUpdate();
			rs = pstmt.executeQuery();

			while (rs.next()) {
   
				dto.setMamber_seq(rs.getInt("member_seq"));
				dto.setMember_id(rs.getString("member_id"));
				dto.setMember_pwd(rs.getString("member_pwd"));
				dto.setName(rs.getString("name"));
				dto.setEmail(rs.getString("email"));
				dto.setMember_date(rs.getDate("member_date"));
				
				System.out.println(dto.toString());

			}

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}
		
		return dto;

	}
	
	//아이디 중복체크 
	public int checkId(String member_id) {
		Connection conn = getConnection();
		PreparedStatement pstmt = null;
		StringBuilder sql = new StringBuilder();

		sql.append(" select                 ");
		sql.append(" 		     member_id  ");
		sql.append(" from    				");
		sql.append(" 		   member		");
		sql.append(" where 					");
		sql.append("  member_id = ? 		");

		int result = 0;

		try {

			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, member_id);

			result = pstmt.executeUpdate();

		} catch (Exception e) {
			System.out.println(e);
		} finally {
			close(pstmt, conn);
		}

		return result;

	}

	// close 기능 메서드
	private void close(PreparedStatement pstmt, Connection conn) { // pstmt, conn close 하는 기능
		if (pstmt != null)
			try {
				pstmt.close();
			} catch (SQLException e) {
			}
		if (conn != null)
			try {
				conn.close();
			} catch (SQLException e) {
			}
	}
}
